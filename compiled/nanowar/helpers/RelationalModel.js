// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Model, RelationalModel, SuperModel, _;
    SuperModel = require('./SuperModel');
    Model = require('backbone').Model;
    _ = require("underscore");
    return RelationalModel = (function(_super) {

      __extends(RelationalModel, _super);

      RelationalModel.prototype.toJSON = function() {
        var json,
          _this = this;
        json = RelationalModel.__super__.toJSON.apply(this, arguments);
        _(this.relationSpecs).each(function(options, name) {
          var related;
          if (related = _this.get(name)) {
            return json[name] = {
              type: 'serializedRelation',
              model: related.get('type'),
              id: related.id,
              toJSON: function() {
                return this;
              }
            };
          }
        });
        return json;
      };

      function RelationalModel(attrs) {
        var _this = this;
        this.bind('beforeInitialSet', function() {
          return _(_this.relationSpecs).each(function(options, name) {
            var segments, _results;
            options.relatedModelName || (options.relatedModelName = options.relatedModel.toString().match(/function (.+)\(\)/)[1]);
            if (options.directory) {
              segments = options.directory.split('.');
              options.directoryObject = _this;
              _results = [];
              while (segments.length !== 0) {
                _results.push(options.directoryObject = options.directoryObject[segments.shift()]);
              }
              return _results;
            }
          });
        });
        RelationalModel.__super__.constructor.apply(this, arguments);
        this._previousAttributes = _.clone(this.attributes);
      }

      RelationalModel.prototype.set = function(attrs, options) {
        var thisType,
          _this = this;
        thisType = this.get('type') || attrs.type;
        _(this.relationSpecs).each(function(options, name) {
          if (typeof attrs[name] !== 'undefined') {
            return attrs[name] = _this._fetchRelation(name, attrs[name], thisType);
          }
        });
        return RelationalModel.__super__.set.apply(this, arguments);
      };

      RelationalModel.prototype._fetchRelation = function(name, value, thisType) {
        var debug, id, inDir, options;
        options = this.relationSpecs[name];
        if (value === null) {
          return null;
        }
        if (value instanceof Model) {
          id = value.get('id');
        } else if ((value.type != null) && value.type === 'serializedRelation') {
          if (value.model !== options.relatedModelName) {
            throw "While instantiating " + thisType + ": Expected serialized relation of a " + options.relatedModelName + " model, not a " + value.model + " model";
          }
          id = value.id;
        } else {
          debug = (function() {
            try {
              return value = JSON.stringify(value);
            } catch (e) {
              return value;
            }
          })();
          throw "While instantiating " + thisType + ": Expected an instance of " + options.relatedModelName + ", not " + debug;
        }
        if (id && options.directoryObject && (inDir = options.directoryObject.get(id))) {
          return inDir;
        } else {
          console.warn(options.directoryObject);
          throw "While instantiating " + thisType + ": " + options.relatedModelName + " is not registered in this." + options.directory;
        }
      };

      RelationalModel.prototype.changedAttributes = function() {
        var allJson, value;
        if (!(value = RelationalModel.__super__.changedAttributes.apply(this, arguments))) {
          return false;
        }
        allJson = this.toJSON();
        value.toJSON = function() {
          var changedJson;
          changedJson = {};
          _(this).each(function(rawVal, name) {
            return changedJson[name] = allJson[name];
          });
          return changedJson;
        };
        return value;
      };

      return RelationalModel;

    })(SuperModel);
  });

}).call(this);
