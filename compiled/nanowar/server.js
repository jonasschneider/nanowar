// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var App, Cell, EnhancerNode, Match, NetworkedPlayer, Player, util, _;
    App = require('./models/App');
    Player = require('./models/Player');
    Cell = require('./models/Cell');
    EnhancerNode = require('./models/EnhancerNode');
    util = require('util');
    _ = require('underscore');
    NetworkedPlayer = (function(_super) {

      __extends(NetworkedPlayer, _super);

      function NetworkedPlayer() {
        return NetworkedPlayer.__super__.constructor.apply(this, arguments);
      }

      NetworkedPlayer.prototype.anonymousSubclass = true;

      NetworkedPlayer.prototype.initialize = function() {
        var pingSentAt,
          _this = this;
        this.socket = this.get('socket');
        this.unset('socket');
        this.socket.emit('log', 'You are: ' + JSON.stringify(this));
        pingSentAt = new Date().getTime();
        this.socket.on('pong', function(pingSentAt) {
          _this.latency = new Date().getTime() - pingSentAt;
          _this.socket.emit('log', "Your RTT is " + _this.latency);
          console.log(_this.get('name') + ' is ready');
          return _this.trigger('ready', _this);
        });
        this.socket.emit('ping', pingSentAt);
        return this.socket.on('update', function(e) {
          return _this.trigger('update', e);
        });
      };

      NetworkedPlayer.prototype.send = function() {
        var clean;
        clean = [];
        _(arguments).each(function(arg) {
          return clean.push(arg);
        });
        return this.socket.emit.apply(this.socket, clean);
      };

      NetworkedPlayer.prototype.updateLocalPlayer = function() {
        return this.socket.emit('setLocalPlayer', this);
      };

      return NetworkedPlayer;

    })(Player);
    Match = (function() {

      function Match() {
        this.players = [];
        this.app = new App;
        this.game = this.app.game;
        this.app.bind('publish', this.distributeUpdate, this);
      }

      Match.prototype.addPlayer = function(clientSocket) {
        var player,
          _this = this;
        console.log(clientSocket.id + " connected");
        player = new NetworkedPlayer({
          socket: clientSocket,
          name: "Player " + (this.players.length + 1),
          game: this.game
        });
        player.bind('update', function(e) {
          return _this.app.trigger('update', e);
        });
        return player.bind('ready', function(player) {
          _this.players.push(player);
          console.log("now " + (JSON.stringify(_this.players)) + " ready");
          if (_this.players.length === 2) {
            return _this.start();
          }
        });
      };

      Match.prototype.distributeUpdate = function(update) {
        return this.sendToAll('update', update);
      };

      Match.prototype.sendToAll = function() {
        var clean;
        clean = [];
        _(arguments).each(function(arg) {
          return clean.push(arg);
        });
        return _(this.players).each(function(player) {
          return player.send.apply(player, clean);
        });
      };

      Match.prototype.start = function() {
        var c1, cells, go,
          _this = this;
        this.sendToAll('log', 'starting soon!');
        console.log('starting. players:');
        _(this.players).each(function(player) {
          _this.game.entities.add(player);
          console.log("- " + (player.get('name')) + " (" + player.socket.id + ")");
          return player.updateLocalPlayer();
        });
        cells = [
          c1 = new Cell({
            x: 350,
            y: 100,
            size: 50,
            game: this.game
          }), new Cell({
            x: 350,
            y: 300,
            size: 30,
            game: this.game,
            owner: this.players[0]
          }), new Cell({
            x: 100,
            y: 200,
            size: 50,
            game: this.game
          }), new Cell({
            x: 500,
            y: 200,
            size: 50,
            game: this.game
          }), new Cell({
            x: 550,
            y: 100,
            size: 30,
            game: this.game,
            owner: this.players[1]
          }), new EnhancerNode({
            x: 440,
            y: 120,
            game: this.game,
            owner: this.players[1]
          })
        ];
        this.game.bind('end', function(result) {
          console.log('Game is over, disconnecting clients');
          result.winner.send('log', 'You win!');
          result.winner.socket.broadcast.emit('log', "You lose. :'(");
          return _(_this.players).each(function(player) {
            player.send('log', 'Bye.');
            return player.socket.disconnect();
          });
        });
        this.game.entities.add(cells);
        go = function() {
          return _this.game.run();
        };
        _(go).delay(1000);
        go = function() {
          console.log("sending random update");
          return _this.sendToAll('log', 'sending random update now');
        };
        _(go).delay(3000);
        return this.onStart();
      };

      return Match;

    })();
    return {
      start: function(io) {
        var fn, match,
          _this = this;
        match = new Match;
        fn = function() {
          match = new Match;
          return match.onStart = fn;
        };
        fn();
        return io.sockets.on('connection', function(clientSocket) {
          return match.addPlayer(clientSocket);
        });
      }
    };
  });

}).call(this);
