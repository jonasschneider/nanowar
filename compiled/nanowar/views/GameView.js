// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, CellView, EnhancerNodeView, FleetView, GameView, Raphael;
    Backbone = require('backbone');
    CellView = require('./CellView');
    FleetView = require('./FleetView');
    EnhancerNodeView = require('./EnhancerNodeView');
    Raphael = require('raphael');
    return GameView = (function(_super) {

      __extends(GameView, _super);

      function GameView() {
        return GameView.__super__.constructor.apply(this, arguments);
      }

      GameView.prototype.initialize = function(options) {
        var _this = this;
        this.appView = options.appView;
        if (!this.appView) {
          throw "need app view";
        }
        this.model.entities.bind('add', this.addEntity, this);
        this.selectedCell = null;
        this.container = $('#nanowar')[0];
        this.paper = Raphael(this.container, 700, 500);
        this.svg = $('#nanowar svg')[0];
        this.ready = 0;
        window.$.get('/images/defs.svg', function(defsSVG) {
          _this.svg.appendChild(defsSVG.getElementById('nanowarDefs'));
          _this.ready += 1;
          if (_this.ready === 2) {
            return _this.trigger('ready');
          }
        });
        window.$.get('/images/icons.svg', function(iDefsSVG) {
          var iconDefs;
          iconDefs = iDefsSVG.getElementById("NanowarIcons");
          iconDefs.setAttribute("opacity", "0");
          _this.svg.appendChild(iconDefs);
          _this.ready += 1;
          if (_this.ready === 2) {
            return _this.trigger('ready');
          }
        });
        return $(this.paper.canvas).click(function() {
          return _this.handleClickInGameArea();
        });
      };

      GameView.prototype.updateObjects = function() {
        console.log('update call');
        return console.log(arguments);
      };

      GameView.prototype.addEntity = function(e) {
        var cellView,
          _this = this;
        switch (e.type) {
          case 'Cell':
            cellView = new CellView({
              model: e,
              gameView: this
            });
            cellView.render();
            return cellView.bind('click', function() {
              return _this.handleClickOnCellView(cellView);
            });
          case 'Fleet':
            return new FleetView({
              model: e,
              gameView: this
            });
          case 'Player':
            return 'asdf';
          case 'EnhancerNode':
            return new EnhancerNodeView({
              model: e,
              gameView: this
            });
          default:
            return console.error("wtf is a " + e.type + "? - " + (JSON.stringify(e)));
        }
      };

      GameView.prototype.handleClickInGameArea = function() {
        if (!this.currentClickIsInCell) {
          this.select(null);
        }
        return this.currentClickIsInCell = false;
      };

      GameView.prototype.handleClickOnCellView = function(cellClickedOn, e) {
        this.currentClickIsInCell = true;
        if (this.selectedCell != null) {
          if (cellClickedOn !== this.selectedCell) {
            return this.model.trigger('publish', {
              sendFleetCommand: new Nanowar.SendFleetCommand({
                game: this.model,
                from: this.selectedCell.model,
                to: cellClickedOn.model
              })
            });
          }
        } else {
          if (this.appView.localPlayer === cellClickedOn.model.get('owner')) {
            return this.select(cellClickedOn);
          }
        }
      };

      GameView.prototype.select = function(cell) {
        this.selectedCell = cell;
        return this.trigger('select');
      };

      return GameView;

    })(Backbone.View);
  });

}).call(this);
