// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var AppView, Backbone, GameView, io;
    Backbone = require('backbone');
    GameView = require('./GameView');
    io = require('socket.io');
    console.log(io);
    return AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.initialize = function() {
        var _this = this;
        this.gameDisplay = new GameView({
          model: this.model.game,
          appView: this
        });
        return this.gameDisplay.bind('ready', function() {
          var socket;
          console.log("connecting..");
          socket = io.connect('http://' + location.hostname);
          socket.on('update', function(e) {
            var fn;
            fn = function() {
              return _this.model.trigger('update', e);
            };
            return fn();
          });
          socket.on('log', function(e) {
            return console.log(e);
          });
          socket.on('ping', function(timestamp) {
            return socket.emit('pong', timestamp);
          });
          socket.on('setLocalPlayer', function(player) {
            var fn;
            fn = function() {
              player = _this.model.game.entities.get(player);
              _this.localPlayer = player;
              _this.trigger('change:localPlayer', player);
              return console.log('localPlayer set: ' + JSON.stringify(player));
            };
            return fn();
          });
          return socket.on('connect', function() {
            console.log('connected to server');
            return _this.model.bind('publish', function(e) {
              return socket.emit('update', e);
            });
          });
        });
      };

      return AppView;

    })(Backbone.View);
  });

}).call(this);
