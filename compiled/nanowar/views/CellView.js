// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, CellDataView, CellView;
    Backbone = require('backbone');
    CellDataView = require('./CellDataView');
    return CellView = (function(_super) {

      __extends(CellView, _super);

      function CellView() {
        return CellView.__super__.constructor.apply(this, arguments);
      }

      CellView.prototype.initialize = function(options) {
        var layers, metal,
          _this = this;
        this.gameView = options.gameView;
        window.lastCellView = this;
        this.gameView.bind('select', this.render, this);
        this.gameView.appView.bind('change:localPlayer', this.render, this);
        this.model.bind('change', this.render, this);
        this.model.bind('incomingFleet', this.pop, this);
        this.el = layers = this.gameView.paper.set();
        layers.push(this.shadow = this.gameView.paper.circle(0, 0, 40));
        layers.push(this.selectedShadow = this.gameView.paper.circle(0, 0, 40));
        layers.push(this.bg = this.gameView.paper.circle(0, 0, 40));
        layers.push(metal = this.gameView.paper.circle(0, 0, 40));
        layers.push(this.fg = this.gameView.paper.circle(0, 0, 40));
        layers.push(this.hover = this.gameView.paper.circle(0, 0, 40));
        this.hover.attr({
          fill: 'white',
          opacity: 0
        });
        metal.attr({
          fill: "url(#metalPattern)"
        });
        this.shadow.attr({
          fill: 'black'
        });
        this.selectedShadow.attr({
          fill: 'white'
        });
        this.shadow.node.setAttribute("filter", "url(#cellShadow)");
        this.selectedShadow.node.setAttribute("filter", "url(#cellShadow)");
        layers.attr({
          stroke: 'none',
          cx: this.model.get('x'),
          cy: this.model.get('y'),
          r: 0
        });
        this.animating = true;
        this.el.animate({
          r: this.model.get('size')
        }, 700, 'bounce', function() {
          return _this.animating = false;
        });
        $(this.hover.node).click(function() {
          return _this.trigger('click');
        });
        $(this.hover.node).mouseover(function() {
          if (_this.gameView.appView.localPlayer === _this.model.get('owner')) {
            return _this.hover.attr({
              opacity: 0.05
            });
          }
        });
        $(this.hover.node).mouseout(function() {
          return _this.hover.attr({
            opacity: 0
          });
        });
        return new CellDataView({
          model: this.model,
          gameView: this.gameView,
          cellView: this
        });
      };

      CellView.prototype.render = function() {
        if (!this.animating) {
          this.el.attr({
            r: this.model.get('size')
          });
        }
        if (this.model.get('owner') && this.model.get('owner').get('color')) {
          switch (this.model.get('owner').get('color')) {
            case 'red':
              this.bg.attr({
                fill: "url(#redBackground)"
              });
              this.fg.attr({
                fill: "url(#redForeground)"
              });
              break;
            case 'blue':
              this.bg.attr({
                fill: "url(#blueBackground)"
              });
              this.fg.attr({
                fill: "url(#blueForeground)"
              });
              break;
            default:
              throw "I don't know color " + (this.model.get('owner').get('color'));
          }
        } else {
          this.bg.attr({
            fill: "url(#greyBackground)"
          });
          this.fg.attr({
            fill: "url(#greyForeground)"
          });
        }
        if (this.gameView.selectedCell === this) {
          this.selectedShadow.attr({
            opacity: 0.7
          });
          this.shadow.attr({
            opacity: 0
          });
        } else {
          this.selectedShadow.attr({
            opacity: 0
          });
          this.shadow.attr({
            opacity: 1
          });
        }
        return this;
      };

      CellView.prototype.pop = function() {};

      return CellView;

    })(Backbone.View);
  });

}).call(this);
