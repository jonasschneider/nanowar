// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Cell, Entity, Player;
    Entity = require('./Entity');
    Player = require('./Player');
    return Cell = (function(_super) {

      __extends(Cell, _super);

      function Cell() {
        return Cell.__super__.constructor.apply(this, arguments);
      }

      Cell.prototype.relationSpecs = {
        owner: {
          relatedModel: Player,
          directory: 'game.entities'
        }
      };

      Cell.prototype.defaults = {
        x: 0,
        y: 0,
        size: 0,
        productionMultiplier: 1 / 100,
        maxStorageMultiplier: 2,
        knownStrength: 0,
        knownStrengthAtTick: 0
      };

      Cell.prototype.initialize = function() {
        return this.bind('change:owner', this.handleOwnerUpdate);
      };

      Cell.prototype.position = function() {
        return {
          x: this.get('x'),
          y: this.get('y')
        };
      };

      Cell.prototype.handle_incoming_fleet = function(fleet) {
        var newStrength;
        this.trigger('incomingFleet', fleet);
        if (typeof onServer === "undefined" || onServer === null) {
          return;
        }
        if (fleet.get('owner') === this.get('owner')) {
          console.log("Friendly fleet of " + (fleet.get('strength')) + " arrived at " + this.cid);
          return this.changeCurrentStrengthBy(fleet.get('strength'));
        } else {
          console.log("Hostile fleet of " + (fleet.get('strength')) + " arrived at " + this.cid);
          newStrength = this.getCurrentStrength() - fleet.get('strength');
          if (newStrength === 0) {
            this.set({
              owner: null
            }, {
              silent: true
            });
            console.log("" + this.cid + " changed to neutral");
          } else if (newStrength < 0) {
            this.set({
              owner: fleet.get('owner')
            }, {
              silent: true
            });
            newStrength = -newStrength;
            console.log("" + this.cid + " overtaken by " + (fleet.get('owner').get('name')));
          }
          return this.setCurrentStrength(newStrength);
        }
      };

      Cell.prototype.handleOwnerUpdate = function() {
        var val;
        val = this.get('owner');
        this.set({
          owner: this._previousAttributes.owner
        }, {
          silent: true
        });
        this.checkpointStrength();
        return this.set({
          owner: val
        }, {
          silent: true
        });
      };

      Cell.prototype.units_per_tick = function() {
        if (!this.get('owner')) {
          return 0;
        }
        return this.get('size') * this.get('productionMultiplier');
      };

      Cell.prototype.setup = function() {
        return this.set_owner(this.owner);
      };

      Cell.prototype.getMax = function() {
        return this.get('size') * this.get('maxStorageMultiplier');
      };

      Cell.prototype.getCurrentStrength = function() {
        return Math.min(this.getMax(), this.get('knownStrength') + Math.round((this.game.ticks - this.get('knownStrengthAtTick')) * this.units_per_tick()));
      };

      Cell.prototype.checkpointStrength = function(options) {
        return this.setCurrentStrength(this.getCurrentStrength(), options);
      };

      Cell.prototype.setCurrentStrength = function(newStrength, options) {
        return this.set({
          knownStrengthAtTick: this.game.ticks,
          knownStrength: newStrength
        }, options);
      };

      Cell.prototype.changeCurrentStrengthBy = function(delta, options) {
        return this.setCurrentStrength(this.getCurrentStrength() + delta, options);
      };

      return Cell;

    })(Entity);
  });

}).call(this);
