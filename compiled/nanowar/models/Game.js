// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Backbone, Cell, EnhancerNode, EntityCollection, Fleet, Game, Player, SendFleetCommand, _;
    Cell = require('./Cell');
    Player = require('./Player');
    Fleet = require('./Fleet');
    EnhancerNode = require('./EnhancerNode');
    SendFleetCommand = require('../commands/SendFleetCommand');
    EntityCollection = require('./EntityCollection');
    _ = require('underscore');
    Backbone = require('backbone');
    return Game = (function(_super) {

      __extends(Game, _super);

      function Game() {
        return Game.__super__.constructor.apply(this, arguments);
      }

      Game.prototype.defaults = {
        tickLength: 1000 / 10
      };

      Game.prototype.initialize = function() {
        var _this = this;
        this.entities = new EntityCollection([], {
          game: this,
          types: [Cell, Player, Fleet, EnhancerNode]
        });
        if (typeof onServer !== "undefined" && onServer !== null) {
          this.entities.bind('publish', function(e) {
            return _this.trigger('publish', {
              entities: e,
              ticks: _this.ticks
            });
          });
          this.bind('start', function() {
            return _this.trigger('publish', 'start');
          });
        }
        this.bind('update', function(e) {
          var cmd;
          if (e.ticks != null) {
            _this.ticks = e.ticks;
          }
          if (e.entities != null) {
            _this.entities.trigger('update', e.entities);
          }
          if (e.sendFleetCommand != null) {
            e.sendFleetCommand.game = _this;
            cmd = new SendFleetCommand(e.sendFleetCommand);
            cmd.run();
          }
          if (e === 'start') {
            return _this.run();
          }
        });
        this.ticks = 0;
        this.running = false;
        return this.stopping = false;
      };

      Game.prototype.getEntities = function(type) {
        return this.entities.select(function(entity) {
          return entity instanceof type;
        });
      };

      Game.prototype.getCells = function() {
        return this.getEntities(Cell);
      };

      Game.prototype.getPlayers = function() {
        return this.getEntities(Player);
      };

      Game.prototype.getWinner = function() {
        var owners,
          _this = this;
        owners = [];
        _(this.getCells()).each(function(cell) {
          var cellOwner;
          cellOwner = cell.get('owner');
          if ((cellOwner != null) && owners.indexOf(cellOwner) === -1) {
            return owners.push(cellOwner);
          }
        });
        if (owners.length === 1) {
          return owners[0];
        } else {
          return null;
        }
      };

      Game.prototype.run = function() {
        console.log("GOGOGOG");
        this.trigger('start');
        return this.schedule();
      };

      Game.prototype.schedule = function() {
        var _this = this;
        return setTimeout(function() {
          return _this.tick();
        }, this.get('tickLength'));
      };

      Game.prototype.halt = function() {
        return this.stopping = true;
      };

      Game.prototype.tick = function() {
        var winner;
        if (!this.stopping) {
          this.schedule();
        }
        this.ticks++;
        this.trigger('tick');
        if (winner = this.getWinner()) {
          this.trigger('end', {
            winner: winner
          });
          return this.halt();
        }
      };

      Game.prototype.ticksToTime = function(ticks) {
        return ticks * this.get('tickLength');
      };

      return Game;

    })(Backbone.Model);
  });

}).call(this);
