// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var Cell, Entity, Fleet, Player, util, _;
    Player = require('./Player');
    Entity = require('./Entity');
    Cell = require('./Entity');
    _ = require('underscore');
    util = require('../helpers/util');
    return Fleet = (function(_super) {

      __extends(Fleet, _super);

      function Fleet() {
        return Fleet.__super__.constructor.apply(this, arguments);
      }

      Fleet.prototype.defaults = {
        launched_at: null,
        speedPerTick: 6
      };

      Fleet.prototype.relationSpecs = {
        from: {
          relatedModel: Cell,
          directory: 'game.entities'
        },
        to: {
          relatedModel: Cell,
          directory: 'game.entities'
        },
        owner: {
          relatedModel: Player,
          directory: 'game.entities'
        }
      };

      Fleet.prototype.initialize = function() {
        return this.game.bind('tick', this.update, this);
      };

      Fleet.prototype.startPosition = function() {
        return util.nearestBorder(this.get('from').position(), this.get('from').get('size'), this.get('to').position());
      };

      Fleet.prototype.endPosition = function() {
        return util.nearestBorder(this.get('to').position(), this.get('to').get('size'), this.get('from').position());
      };

      Fleet.prototype.eta = function() {
        return this.arrivalTime() - this.game.ticks;
      };

      Fleet.prototype.flightTime = function() {
        return Math.round(this.distance() / this.get('speedPerTick'));
      };

      Fleet.prototype.arrivalTime = function() {
        return this.get('launched_at') + this.flightTime();
      };

      Fleet.prototype.distance = function() {
        return util.distance(this.startPosition(), this.endPosition());
      };

      Fleet.prototype.canLaunch = function() {
        return this.get('from') && this.get('to') && this.get('from') !== this.get('to') && this.get('strength') > 0;
      };

      Fleet.prototype.launch = function() {
        this.set({
          owner: this.get('from').get('owner')
        });
        if (!this.get('strength')) {
          this.set({
            strength: Math.floor(this.get('from').getCurrentStrength() / 2)
          });
        }
        if (this.canLaunch()) {
          console.log("[Tick" + this.game.ticks + "] [Fleet " + this.cid + "] Fleet of " + (this.get('strength')) + " launching " + (this.get('from').cid) + "->" + (this.get('to').cid) + "; arrival in " + (this.flightTime()) + " ticks");
          this.get('from').changeCurrentStrengthBy(-this.get('strength'));
          this.set({
            launched_at: this.game.ticks
          });
          return true;
        } else {
          return false;
        }
      };

      Fleet.prototype.arrived = function() {
        return this.arrivalTime() < this.game.ticks;
      };

      Fleet.prototype.update = function() {
        if (this.arrived()) {
          console.log("[Tick" + this.game.ticks + "] [Fleet " + this.cid + "] Arrived from route " + (this.get('from').cid) + "->" + (this.get('to').cid));
          this.get('to').handle_incoming_fleet(this);
          return this.destroy();
        }
      };

      Fleet.prototype.destroy = function() {
        this.game.unbind('tick', this.update, this);
        return this.trigger('destroy', this);
      };

      return Fleet;

    })(Entity);
  });

}).call(this);
