// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var EnhancerNode, Entity, Player, util, _;
    Player = require('./Player');
    Entity = require('./Entity');
    _ = require('underscore');
    util = require('../helpers/util');
    return EnhancerNode = (function(_super) {

      __extends(EnhancerNode, _super);

      function EnhancerNode() {
        return EnhancerNode.__super__.constructor.apply(this, arguments);
      }

      EnhancerNode.prototype.defaults = {
        x: 0,
        y: 0
      };

      EnhancerNode.prototype.relationSpecs = {
        owner: {
          relatedModel: Player,
          directory: 'game.entities'
        }
      };

      EnhancerNode.prototype.initialize = function() {
        this._previousAffectedCells = this.affectedCells();
        this.game.entities.bind('add', this.update, this);
        this.game.entities.bind('change', this.update, this);
        return this.game.entities.bind('remove', this.update, this);
      };

      EnhancerNode.prototype.update = function() {
        var newly, previously,
          _this = this;
        newly = this.affectedCells();
        previously = this._previousAffectedCells;
        _(newly).chain().difference(previously).each(function(c) {
          return _this.trigger('affectedCells:add', c);
        });
        _(previously).chain().difference(newly).each(function(c) {
          return _this.trigger('affectedCells:remove', c);
        });
        return this._previousAffectedCells = newly;
      };

      EnhancerNode.prototype.position = function() {
        return {
          x: this.get('x'),
          y: this.get('y')
        };
      };

      EnhancerNode.prototype.affectedCells = function() {
        var _this = this;
        return _(this.game.getCells()).chain().select(function(cell) {
          return cell.get('owner') === _this.get('owner');
        }).sortBy(function(cell) {
          return util.distance(_this.position(), cell.position());
        }).first(2).value();
      };

      return EnhancerNode;

    })(Entity);
  });

}).call(this);
